[{"C:\\D drive\\Qr code\\qr-reader\\src\\index.js":"1","C:\\D drive\\Qr code\\qr-reader\\src\\reportWebVitals.js":"2","C:\\D drive\\Qr code\\qr-reader\\src\\App.js":"3","C:\\D drive\\Qr code\\qr-reader\\src\\JsonInfo.js":"4","C:\\D drive\\Qr code\\qr-reader\\src\\main.js":"5","C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\index.js":"6","C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\reportWebVitals.js":"7","C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\App.js":"8","C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\main.js":"9","C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\JsonInfo.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":478,"mtime":1614092745049,"results":"14","hashOfConfig":"12"},{"size":19999,"mtime":1616283085085,"results":"15","hashOfConfig":"12"},{"size":2245,"mtime":1614093554517,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1616546418000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1616546418000,"results":"19","hashOfConfig":"18"},{"size":478,"mtime":1616546418000,"results":"20","hashOfConfig":"18"},{"size":2165,"mtime":1632739717269,"results":"21","hashOfConfig":"18"},{"size":19542,"mtime":1616546418000,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"lcj0p4",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"163hijf",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\D drive\\Qr code\\qr-reader\\src\\index.js",[],["45","46"],"C:\\D drive\\Qr code\\qr-reader\\src\\reportWebVitals.js",[],"C:\\D drive\\Qr code\\qr-reader\\src\\App.js",[],"C:\\D drive\\Qr code\\qr-reader\\src\\JsonInfo.js",["47","48"],"import React,{useState, useEffect} from 'react';\r\n\r\nimport Myjson from './myjson/MyJson.json';\r\n\r\nexport default function JsonInfo(props) { \r\n    let inputFieldValues = {};\r\n    const [isShown, setIsShown] = useState([]);\r\n    /* const [input1, setInput1]=useState('');\r\n    const [input2, setInput2]=useState('');\r\n    const [input3, setInput3]=useState(''); */\r\n\r\n    const [parameters, setParameters] = useState({\r\n        activitytype: undefined,\r\n        animalId: undefined,\r\n        shaving:undefined,\r\n    \r\n        studyactivityId: undefined,\r\n        activityId:undefined,\r\n        \r\n        result: undefined,\r\n        fieldvalues:undefined,\r\n        \r\n    });\r\n\r\n    function sendToAPI(parameters){\r\n        let s = '';\r\n        for (const property in parameters) {\r\n            let value = parameters[property];\r\n            if (value !== undefined) \r\n                s = s + property + \": \" + value + \" \";\r\n        }\r\n\r\n        alert(s);\r\n    }\r\n\r\n    useEffect(() => {\r\n        sendToAPI(parameters);\r\n    }, [parameters])\r\n\r\n    const [weightFieldValue, setWeightFieldValue]=useState(undefined);\r\n   // const [result, setResult]=useState(undefined);\r\n    const [value, setValue] = useState({\r\n        Breath: [],\r\n        Skin: [],\r\n        \"Flesh and Weight\": [],\r\n    });\r\n  /*   const [shaving, setShaving]=useState(false);\r\n    const [animalId, setAnimalId]=useState(0);\r\n    const [activityId, setActivityId]=useState(0); */\r\n\r\n    //const [result1, setResult1] = useState();\r\n    //const [scoring, setScoring]=useState(0);\r\n\r\n        /* function addScore(scr){\r\n            setScoring(scoring+scr);\r\n            console.log(\"scoring: \", scoring);\r\n        }\r\n */\r\n/* activitytype,studyid,animalid, studyactivityid, activityid, comments, result, fieldvalues, scoring */\r\n\r\n    //console.log(animalId)\r\n    \r\n        function handleSelect(e) {\r\n        //let id=e.target.firstChild.dataset.id;\r\n        let name = e.target.name;\r\n        if(e.target.value==='0'){\r\n            return \r\n        }\r\n        let newValue = value[name];\r\n\r\n        if(newValue.includes(e.target.value)){\r\n            return \r\n        }\r\n        newValue.push(e.target.value);\r\n        setValue({ ...value, [name]: newValue});\r\n\r\n    }\r\n function deleteOption(name, option){\r\n    let newValue = value[name];\r\n    let index = newValue.indexOf(option);\r\n    newValue.splice(index, 1);\r\n    setValue({ ...value, [name]: newValue});\r\n }\r\n\r\n    function syncInput(e, field){\r\n        inputFieldValues[field] = e.target.value;\r\n    }\r\n\r\n    function syncWithWeightValue(e){\r\n        //setInput4(e.target.value);\r\n        /* setParameters({...parameters, obj: {\r\n            fieldvalues: e.target.value\r\n        }}); */\r\n        setWeightFieldValue(e.target.value);\r\n    }\r\n  \r\n /*    function calculation(){\r\n        let Pi=3.14\r\n\r\n        let result = eval();\r\n        //setResult(4/3*parseInt(input1)/2*parseInt(input2)/2*parseInt(input3)/2*Pi);\r\n        setInput1('');\r\n        setInput2('');\r\n        setInput3('');\r\n    } */\r\n    \r\n    function clickEvent(ani) {\r\n      /* setIsShown(!isShown); */\r\n        setIsShown(\r\n        isShown.map((animalShown) => {\r\n        if (animalShown.id === ani) {\r\n            animalShown.showing = !animalShown.showing;\r\n        }\r\n    return animalShown;\r\n        })\r\n    );\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n    let startValues = Myjson.Animals.map((animal) => {\r\n        return { id: animal.Id, showing: false };\r\n    });\r\n    setIsShown(startValues);\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    //console.log(\"MyJson ID: \", Myjson.Id, 'cageId:',props.data);\r\n    //console.log(\"Cage Id: \", props.data);\r\n    if(Myjson.Id === props.data){\r\n        const testHtml = Myjson.Animals.map((animal) => {\r\n            //console.log(isShown);\r\n            if (isShown.length > 0 && isShown.filter((a) => a.id === animal.Id)[0].showing) {\r\n               // console.log(\"Rendering:\" , animal.Id);\r\n               \r\n                return (\r\n                <div key={animal.Id} className=\"posts\">\r\n                    <table  className=\"posts\">\r\n                        <tr key={animal.Id}>\r\n                        <th>Animal-Id</th>\r\n                        <th>Animal-Identification</th>\r\n                        <th>Animal-StudyGroupName</th>\r\n                        <th>Details</th>  \r\n                        </tr>\r\n                        <tr>\r\n                        <td>{animal.Id}</td>\r\n                        <td>{animal.Identification} </td>\r\n                        <td>{animal.StudyGroupName} </td>\r\n                        <td><button type=\"button\" onClick={() => {\r\n                            clickEvent(animal.Id)\r\n                            \r\n                            //setAnimalId(animal.Id)\r\n                            /* setParameters({...parameters, obj: {\r\n                                animalId: animal.Id\r\n                            }}); */\r\n                            setParameters(parameters => ({\r\n                              ...parameters,\r\n                              animalId: animal.Id\r\n                            }));\r\n                            \r\n\r\n                            console.log(parameters.animalId)\r\n                        }}>\r\n                            Show Details\r\n                            </button></td>\r\n                        </tr>\r\n                    </table>\r\n                    <ul>\r\n                    {animal.Activities.map((activity) => {\r\n                        let activityType=<div></div>;\r\n                        if (activity.ActivityType === 4)\r\n                        {\r\n                            //let activityid = activity.Id;\r\n                            activityType=(\r\n                    \r\n                                    <div key={activity.id}>\r\n                                    <h2>{activity.ActivityName}</h2>\r\n                                    <button onClick={() => {\r\n                                        console.log(\"clicked shaving\");\r\n                                  /*   setParameters({...parameters, obj: {\r\n                                        activitytype: activity.ActivityType\r\n                                    }}); */\r\n                                  \r\n                                    setParameters(parameters => ({\r\n                                      ...parameters,\r\n                                      activitytype: activity.ActivityType,\r\n                                      studyactivityId: activity.StudyActivityId,\r\n                                      activityId: activity.Id,\r\n                                      fieldvalues: undefined,\r\n                                      shaving: activity.LatestResult,\r\n                                      result: undefined,\r\n                                      animalId: animal.Id\r\n                                    }));\r\n                                    \r\n                                    \r\n                                       // setShaving(activity.LatestResult)\r\n                                       /*  setParameters({...parameters, obj: {\r\n                                                shaving: activity.LatestResult\r\n                                            }}); */\r\n                                            console.log(parameters.shaving);\r\n                                        }}>done</button>\r\n                                        \r\n                                    <p><i>{activity.LatestDate}</i></p>\r\n                                    </div>\r\n                                                            );\r\n                                                        }\r\n                                                        if(activity.ActivityType===9){\r\n                                                            activityType=(\r\n                                                                <div key={activity.id}>\r\n                                    <h2>{activity.ActivityName}</h2>\r\n                                    <input onChange={syncWithWeightValue} value={parameters.fieldvalues}></input>\r\n                                    <button onClick={\r\n                                        () => {\r\n                                            //setActivityId(activity.Id);\r\n                                            /* setParameters({...parameters, obj: {\r\n                                                activityId: activity.Id\r\n                                            }}); */\r\n                                            setParameters(parameters => ({\r\n                                                ...parameters,\r\n                                                activitytype: activity.ActivityType,\r\n                                                studyactivityId: activity.StudyActivityId,\r\n                                                activityId: activity.Id,\r\n                                                shaving: undefined,\r\n                                                fieldvalues: weightFieldValue\r\n                                            \r\n                                            }));\r\n                                            //sendToAPI(activitytype, studyid,animalId, studyactivityid, activityid, comments, result, fieldvalues, scoring)\r\n                                            //console.log(activityId);\r\n                                        }\r\n                                        \r\n                                    } \r\n                                    >Save</button>\r\n                                    <p><i>{activity.LatestDate}</i></p> \r\n\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            if(activity.ActivityType===6){\r\n                                const cal= parseFloat(activity.LatestResult)*10/1000;\r\n                                activityType=(\r\n                                    <div key={activity.id}>\r\n                                        <h2>{activity.ActivityName}</h2>\r\n                                        <p>Substance:{activity.Substance}</p>\r\n                                        <p>Conc:{activity.Concentration}</p>\r\n                                        <p>FormulaConc:{activity.FormulationConcentration}</p>\r\n                                        <p>Dose:{activity.Dose}</p>\r\n                                        <p>{cal}</p>\r\n                                        <p><i>{activity.LatestDate}</i></p>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                if(activity.ActivityType===5){\r\n                                    activityType=(\r\n                                        <div key={activity.id}>\r\n                                        <h2>{activity.ActivityName}</h2>\r\n                                        <p><i>Select</i></p>\r\n                                        \r\n                                        <p><i>{activity.LatestDate}</i></p>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                if(activity.ActivityType===3){\r\n                                    let inputFields = activity.NumericValues.split(',');\r\n                                \r\n                                    let inputElements = inputFields.map((field) => {\r\n                                        return (\r\n                                        <>\r\n                                            <label>{field}</label> \r\n                                            <input onChange={(e) => {syncInput(e, field)}}></input>\r\n                                        </>\r\n                                        );\r\n                                    });\r\n                                    \r\n                                    //let result = 4/3*(numericValues1/2)*(numericValues2/2)*(numericValues3/2)*[Pi]\r\n                                    activityType=(\r\n                                        <div >\r\n                                        <h2>{activity.ActivityName}</h2>\r\n                                        <form>\r\n                                        {inputElements}\r\n                                        <button type=\"button\" onClick={() => {\r\n                                            let formula = activity.Formula.slice();\r\n                                            for (let field of inputFields) {\r\n                                                //alert(inputFieldValues[field]);\r\n                                                formula = formula.replace('[' + field + ']', inputFieldValues[field]);\r\n                                            }\r\n\r\n                                            formula = formula.replace('[Pi]', 'Math.PI');\r\n                                            //alert(formula);\r\n\r\n                                            let result = Math.round((eval(formula) + Number.EPSILON) * 100) / 100;\r\n                                            //setResult(result);\r\n                                            /* setParameters({...parameters, obj: {\r\n                                                result: result\r\n                                            }}); */\r\n                                        /*  setParameters(parameters => ({\r\n                                            ...parameters,\r\n                                            result: result\r\n                                            })); */\r\n                                            setParameters(parameters => ({\r\n                                                ...parameters,\r\n                                                activitytype: activity.ActivityType,\r\n                                                studyactivityId: activity.StudyActivityId,\r\n                                                activityId: activity.Id,\r\n                                                shaving: undefined,\r\n                                                fieldvalues: undefined,\r\n                                                result:result\r\n                                            }));\r\n                                        }}>calculate</button>\r\n                                        <p>Result:{parameters.result}</p>\r\n                                        </form>\r\n                                        \r\n                                        <button onClick={()=>sendToAPI(parameters)}>Save</button><i>{activity.LatestDate}</i>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                                return activityType;\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                );\r\n            } else {\r\n                // activitytype,studyid,animalid, studyactivityid, activityid, comments, result, fieldvalues, scoring\r\n                return (\r\n                    <table key={animal.Id} className=\"posts\">\r\n                    <tr>\r\n                    <th>Animal-Id</th>\r\n                    <th>Animal-Identification</th>\r\n                    <th>Animal-StudyGroupName</th>\r\n                    <th>Details</th>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>{animal.Id}</td>\r\n                    <td>{animal.Identification} </td>\r\n                    <td>{animal.StudyGroupName} </td>\r\n                    <td><button type=\"button\" onClick={() => clickEvent(animal.Id)}>\r\n                    Show Details\r\n                    </button></td>\r\n                    </tr>\r\n                </table>\r\n                );\r\n            }\r\n        });\r\n        const obsHTML=Myjson.ObservationGroups.map((a)=>{\r\n            \r\n            return(\r\n                <div key={a.ObservationGroupId}> \r\n                        {a.ObservationGroupName}:\r\n                    <form>\r\n\r\n                    <select onChange={handleSelect} name={a.ObservationGroupName}> \r\n                        <option value='0'></option>\r\n                        {a.Observations.map((observation)=>{\r\n                            \r\n                            //console.log('totalScore', totalScore);\r\n                            return (                                 \r\n                                <option key={observation.Id} /* onChange={() => addScore(observation.Scoring)} */>\r\n                                    Observation Name: {observation.Name} ObservationId: {observation.Id} Scoring: {observation.Scoring} \r\n                                \r\n                                </option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                    </form>\r\n                    \r\n                    {/* {a.ObservationGroupId === value.id ? <ul><li>{value[a.ObservationGroupName.replace(' ','')]}</li></ul> : <React.Fragment/>}\r\n                    {a.ObservationGroupId === value.id ? <h4> Total Scoring:</h4> : <React.Fragment/>}    */}\r\n                        {/* <ul>\r\n                            {value[a.ObservationGroupName] ? value[a.ObservationGroupName].map((x) => {\r\n                            return <li>{x}</li>;\r\n                        }) : <></>}\r\n                    </ul> */}\r\n                        \r\n                    </div>\r\n                    \r\n                    )\r\n                }) \r\n                \r\n                let keys = Object.keys(value);\r\n                let scoring = 0;\r\n                let obId1=[];\r\n            \r\n                let ulList = (<ul>\r\n                    {\r\n                        keys.map((key) => {\r\n                            return value[key].map((lis,index) => {\r\n                                let x= lis.split('Scoring:')\r\n                                let y = parseFloat(x[1])\r\n                                scoring = scoring + y;\r\n                            /*     setParameters(parameters => ({\r\n                                ...parameters,\r\n                                scoring: scoring\r\n                                })); */\r\n                                let obId= lis.split(' ')\r\n                                obId1.push(obId[4]+' ')\r\n\r\n                                console.log(obId1)\r\n                                return (\r\n                                <div>\r\n                                <li key={index}>{lis}</li>\r\n                                        <button onClick={()=>{deleteOption(key,lis)}}>delete</button>\r\n                            </div>\r\n                            )\r\n                            })\r\n                        })\r\n                    }\r\n                    </ul>);\r\n                \r\n\r\n\r\n\r\n\r\n/* function activityDone() {\r\n    setShaving('done')\r\n    } */\r\n    /* function sendToAPI(shaving){\r\n        alert(shaving);\r\n    } */\r\n/* function sendToAPI(activitytype,studyid,animalid, studyactivityid, activityid, comments, result, fieldvalues, scoring){\r\n    alert(activitytype+''+ studyid +''+ animalid +''+ studyactivityid +''+ activityid +''+ comments+'' +result+''+ fieldvalues +''+scoring);\r\n} */\r\n/* function sendResult(){\r\n    alert(result);\r\n} */\r\nfunction sendToFunction(scoring, obId1){\r\n    alert( 'Scoring:'+ scoring +' '+'ObservationId:'+ obId1)\r\n}\r\n/* let sum=0;\r\nlet addScoring= Myjson.ObservationGroups.Observations.map((observation)=>{\r\n    return sum+=parseFloat(observation.Scoring)\r\n            }) */\r\n            \r\n\r\n            return (\r\n                <React.Fragment>\r\n            \r\n                {testHtml}\r\n                {obsHTML}\r\n                {ulList}\r\n                {obId1}\r\n            \r\n                {/* {addScoring} */}\r\n                <p>Total Scoring: {scoring}</p>\r\n                <button onClick={()=>{sendToFunction(scoring, obId1)}}>send</button>            \r\n            </React.Fragment>\r\n            );           \r\n    }\r\n\r\n    else{\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n\r\n}","C:\\D drive\\Qr code\\qr-reader\\src\\main.js",[],"C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\index.js",[],"C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\reportWebVitals.js",[],"C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\App.js",[],"C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\main.js",["49"],"C:\\D drive\\Shorna-newPC\\VivoLogica Project\\JSON-Project-main\\src\\JsonInfo.js",["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":292,"column":70,"nodeType":"58","messageId":"59","endLine":292,"endColumn":74},{"ruleId":"60","severity":1,"message":"61","line":428,"column":36,"nodeType":"62","messageId":"63","endLine":428,"endColumn":37},{"ruleId":"64","severity":1,"message":"65","line":77,"column":9,"nodeType":"66","messageId":"67","endLine":77,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":292,"column":70,"nodeType":"58","messageId":"59","endLine":292,"endColumn":74},{"ruleId":"60","severity":1,"message":"61","line":428,"column":36,"nodeType":"62","messageId":"63","endLine":428,"endColumn":37},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'changeState' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]